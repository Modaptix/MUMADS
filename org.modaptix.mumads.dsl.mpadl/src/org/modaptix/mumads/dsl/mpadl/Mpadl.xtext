grammar org.modaptix.mumads.dsl.mpadl.Mpadl

with org.modaptix.xtext.expressions.ArithmeticExpression

hidden(SL_COMMENT, WS, EOL) 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.modaptix.org/xtext/expressions/ArithmeticExpression" as arithmeticExpression

generate mpadl "http://www.modaptix.org/mumads/dsl/mpadl/Mpadl"

Mpadl:
	'architecture' name=STRING '{'
	
		'registers' '{'
			registers+=RegisterOrFlag (',' registers+=RegisterOrFlag)*
		'}'
		
		'addressing_modes' '{' 
			addressingModes+=AddressingMode (',' addressingModes+=AddressingMode)*
		'}'
		
		'interrupt_type'
			interruptType=INTERRUPT_TYPE
			
		'interrupt_modes' '{'
			interruptModes+=InterruptMode+
		'}'
		
		'instruction_set' '{'
			instructionSet+=(Instruction)+
		'}'
	'}'
;

RegisterOrFlag returns Instruction:
	RegisterIndexable | RegisterIndexed | RegisterFlag
;

RegisterIndexable:
	RegisterReal | RegisterMmap	
;

RegisterReal:
	'real'
	name=ID
	'(' size=INT ')'	
;

RegisterMmap:
	'mmap'
	name=ID
	'(' size=INT ')'	
	address=HEX	
;

RegisterIndexed:
	RegisterRealIndexed | RegisterMmapIndexed	
;

RegisterRealIndexed:
	'real'
	name=ID
	'[' index=[RegisterIndexable] ']'
	'(' size=INT ')'	
;

RegisterMmapIndexed:
	'mmap'
	name=ID
	'[' index=[RegisterIndexable] ']'
	'(' size=INT ')'	
	address=HEX	
;

RegisterFlag:
	'flag'
	name=ID
;

AddressingMode:
	AddressingModeWithSize | AddressingModeIndexed
;

AddressingModeWithSize:
	AddressingModeImmediate | AddressingModeAddress
;

AddressingModeImmediate:
	'immediate' longName=STRING name=ID size=INT
;

AddressingModeAddress:
	'address' longName=STRING name=ID size=INT
;

AddressingModeIndexed:
	'indexed' longName=STRING name=ID 
;

InterruptMode:
	name=ID
;

Instruction:
	(SimpleInstruction | ComplexInstruction) ';'
;

SimpleInstruction:
	name=ID '->' opcodes+=Opcode (',' opcodes+=Opcode)* 
;

Opcode returns arithmeticExpression::IntegerExpression:
	IntegerExpression
;

IntegerLiteralOrReference returns arithmeticExpression::IntegerExpression:
	IntegerLiteral | OpcodeReference
;

OpcodeReference:
	'[' opcode=INT ']'
;

ComplexInstruction:
	name=ID
	variants+=InstructionVariant ('|' variants+=InstructionVariant)*
;

InstructionVariant:
	operands+=Operand (',' operands+=Operand)* '->' opcodes+=Opcode (',' opcodes+=Opcode)*
;

Operand:
	addressingMode=[AddressingMode]
;

enum INTERRUPT_TYPE: REAL='real' | WAIT='simulated';

terminal EOL: ('\r'? '\n')+;
terminal WS: (' '|'\t')+;

terminal STRING: 
	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
; 

terminal SL_COMMENT: '//' !('\n'|'\r')*;
