grammar org.modaptix.mumads.dsl.asm.Asm 

with org.modaptix.xtext.expressions.ArithmeticExpression

hidden(SL_COMMENT) 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.modaptix.org/xtext/expressions/ArithmeticExpression" as arithmeticExpression
import "http://www.modaptix.org/mumads/dsl/mpadl/Mpadl" as mpadl

import "http://www.modaptix.org/mumads/dsl/asm/Asm"

Asm:
	(WS* EOL)*
	(code+=Instruction (WS* EOL)+)+ 
;

Instruction returns mpadl::Instruction:
	Label | ArchInstructionOrMacro | ConcreteInstruction | PseudoInstruction
;

ConcreteInstruction returns mpadl::ConcreteInstruction:
	MacroDefinition //| ArchInstructionOrMacro
;

MacroDefinition:
	((name=ID WS ('MACRO'|'macro')) | ('.MACRO' WS name=ID)) (WS* EOL)+
	(code+=Instruction (WS* EOL)+)+
	((WS ('ENDM'|'endm')) | ('.ENDMACRO'))
;

PseudoInstruction returns mpadl::PseudoInstruction:
	PseudoInstructionIf 	|
	PseudoInstructionDefine |
	PseudoInstructionPragma |
	PseudoInstructionDevice |
	PseudoInstructionImport |
	PseudoInstructionList 	|
	PseudoInstructionDef 	|
	PseudoInstructionEqu 	|
	PseudoInstructionOrg 	|
	PseudoInstructionDs
;

PseudoInstructionImport:
	('#'|'.')? ('import'|'include'|'INCLUDE') WS* importURI=STRING
;

PseudoInstructionIf:
	PseudoInstructionIfdef | PseudoInstructionIfndef
;

PseudoInstructionIfdef:
	'#ifdef' WS condId=ID (WS* EOL)+
		(code+=Instruction (WS* EOL)+)+
	'#endif'
;

PseudoInstructionIfndef:
	'#ifndef' WS condId=ID (WS* EOL)+
		(code+=Instruction (WS* EOL)+)+
	'#endif'
;

PseudoInstructionDefine:
	'#define' WS name=ID
;

PseudoInstructionPragma:
	'#pragma' WS ids+=ID (WS (ids+=ID | vals+=IntegerLiteral))*  
;

PseudoInstructionDevice:
	('.device'|'#device') WS device=ID
;

PseudoInstructionList:
	PseudoInstructionListOn | PseudoInstructionListOff
;

PseudoInstructionListOn:
	{PseudoInstructionListOn} ('.list'|'.LIST')
;

PseudoInstructionListOff:
	{PseudoInstructionListOff} ('.nolist'|'.NOLIST')
;

PseudoInstructionDef:
	('.def'|'.DEF') WS name=ID WS? '=' WS? ref=NamedReference
;

PseudoInstructionEqu:
	PseudoInstructionEqu1 | PseudoInstructionEqu2
;

PseudoInstructionEqu1 returns PseudoInstructionEqu:
	('.equ'|'.EQU') WS name=ID WS '=' WS integerExpression=IntegerExpression
;

PseudoInstructionEqu2 returns PseudoInstructionEqu:
	name=ID WS ('equ'|'EQU') WS integerExpression=IntegerExpression
;

PseudoInstructionOrg:
	WS ('org'|'ORG') WS address = IntegerExpression
;

PseudoInstructionDs:
	name=ID WS ('ds'|'DS') ('.' variant=ID)? WS sizeIntExpr=IntegerExpression
;

Label:
	(localName ?= '.')? name=ID (':')?
;

ArchInstructionOrMacro:
	((localName ?= '.')? name=ID (':')?)? WS mnemonic=[mpadl::ConcreteInstruction] (WS operands+=Operand (COMMA operands+=Operand)* )?	
;

Operand:
	immediate ?= '#'?
	value = IntegerExpression
;

IntegerLiteralOrReference returns arithmeticExpression::IntegerExpression:
	IntegerLiteral | NamedReference
;

NamedReference:
	target=[mpadl::NamedEntity|RegisterID]	//NamedReferenceName
;

RegisterID returns ecore::EString:
	ID ( '[' ID ']' )?
;

terminal EOL: ('\r'? '\n')+;
terminal WS: (' '|'\t')+;
terminal COMMA: (',' WS?);
terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal SL_COMMENT 	: ';' !('\n'|'\r')*;

terminal STRING	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
		; 
